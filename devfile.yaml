apiVersion: 1.0.0
metadata:
  generateName: postit-app-

projects:

  - source:
      type: git
      location: 'https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app'
    name: postit-app


components:

  - alias: quarkus-backend-dev
    type: dockerimage
    image: quay.io/quarkus/centos-quarkus-maven:20.0.0-java8
    memoryLimit: 5Gi
    command: ['sleep']
    args: ['infinity']
    mountSources: true
    env:
      - name: MAVEN_OPTS
        value: '-Dmaven.repo.local=/.m2/repository'
      - name: username
        value: 'user'
      - name: password
        value: 'password'
      - name: admin_password
        value: 'password'
      - name: uri
        value: 'mongodb://localhost'
    endpoints:
      - name: 'quarkus-dev'
        port: 8080
    volumes:
      - name: m2
        containerPath: /.m2

  - mountSources: true
    memoryLimit: 64M
    type: dockerimage
    image: quay.io/sunix/postit-app-dev-data
    alias: data
    volumes:
      - name: m2
        containerPath: /work/volumes/.m2

  - alias: node-frontend-dev
    mountSources: true
    image: 'quay.io/eclipse/che-nodejs8-centos:7.2.0'
    memoryLimit: 768Mi
    type: dockerimage
    endpoints:
      - name: '3000-tcp'
        port: 3000
    env:
      - name: FRONTEND_PORT
        value: '3000'

  - alias: quarkus-backend-native-prod
    type: dockerimage
    image: quay.io/quarkus/ubi-quarkus-native-image:19.2.0.1
    memoryLimit: 32M
    mountSources: true
    command: ['tail']
    args: ['-f', '/dev/null']
    endpoints:
      - name: '8080-tcp'
        port: 8080
    env:
      - name: username
        value: 'user'
      - name: password
        value: 'password'
      - name: admin_password
        value: 'password'
      - name: uri
        value: 'mongodb://localhost'

  - alias: mongo
    type: dockerimage
    image: centos/mongodb-34-centos7
    memoryLimit: 512Mi
    env:
     - name: MONGODB_USER
       value: user
     - name: MONGODB_PASSWORD
       value: password
     - name: MONGODB_DATABASE
       value: sampledb
     - name: MONGODB_ADMIN_PASSWORD
       value: password

  - id: redhat/quarkus-java11/latest
    type: chePlugin

  - id: redhat/vscode-openshift-connector/0.1.2
    type: chePlugin
    alias: vscode-openshift


  - alias: git
    type: dockerimage
    image: sunix/git-devtools
    mountSources: true
    memoryLimit: 64M
    args: ['sleep', 'infinity']

commands:

  - name: start DEVMODE quarkus-backend
    actions:
      - type: exec
        command: pkill java; mvn compile quarkus:dev
        component: quarkus-backend-dev
        workdir: /projects/postit-app/quarkus-backend

#  - name: build JVM quarkus-backend
#    actions:
#      - type: exec
#        command: pkill java; mvn package
#        component: quarkus-backend-dev
#        workdir: /projects/postit-app/quarkus-backend

  - name: build NATIVE quarkus-backend
    actions:
      - type: exec
        command: pkill java; mvn package -Pnative
        component: quarkus-backend-dev
        workdir: /projects/postit-app/quarkus-backend

  - name: start NATIVE quarkus-backend
    actions:
      - type: exec
        command: ./quarkus-backend-1.0.0-SNAPSHOT-runner -Dquarkus.http.host=0.0.0.0
        component: quarkus-backend-native-prod
        workdir: /projects/postit-app/quarkus-backend/target

  - name: connect java debugger quarkus-backend
    actions:
      - type: vscode-launch
        referenceContent: |
          {
          "version": "0.2.0",
          "configurations": [
            {
              "type": "java",
              "name": "Debug (Attach) - Remote",
              "request": "attach",
              "hostName": "localhost",
              "port": 5005
            }]
          }


 # - name: build PROD node-frontend
 #   actions:
 #    - type: exec
 #      command: tar zxvf /projects/local/node_modules.tar.gz ; rm /projects/local/node_modules.tar.gz  ; npm install
 #      component: node-frontend-dev
 #      workdir: /projects/postit-app/node-frontend/

  - name: start DEVMODE node-frontend
    actions:
      - type: exec
        command: npm run devmode
        component: node-frontend-dev
        workdir: /projects/postit-app/node-frontend/

  - name: start PROD node-frontend
    actions:
      - type: exec
        command: npm start
        component: node-frontend-dev
        workdir: /projects/postit-app/node-frontend/


  - name: oc - deploy app (quarkus NATIVE) from github
    actions:
      - type: exec
        command: |-
                  # mongodb
                  oc new-app -e MONGODB_USER=user -e MONGODB_PASSWORD=password -e MONGODB_DATABASE=sampledb -e MONGODB_ADMIN_PASSWORD=password centos/mongodb-36-centos7 --name=mongo
                  # s2i quarkus app from source
                  oc new-app quay.io/quarkus/ubi-quarkus-native-s2i:20.0.0-java8~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --name=quarkus-backend --context-dir=quarkus-backend -e uri=mongodb://mongo -e username=user -e password=password
                  # s2i node frontend from source
                  oc new-app nodejs~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --context-dir=node-frontend --name=node-frontend -e PORT=8080 -e COMPONENT_QUARKUS_BACKEND_HOST=quarkus-backend
                  oc expose svc/node-frontend
                  # quarkus native build need more cpu and memory
                  # wait for quakus-backend build to start and cancel it to reconfigure it
                  for i in 1 2 3 4 5 6 7 8 9; do
                    pods="$(oc get build -o go-template='{{range .items}}{{$bc := index .metadata.annotations "openshift.io/build-config.name"}}{{$status := index .status.phase}}{{if eq $bc "quarkus-backend"}}{{if eq $status "Running"}}{{.metadata.name}}{{"\t"}}{{.status.phase}}{{"\n"}}{{end}}{{end}}{{end}}')";
                    echo $pods;
                    if [ -n "$pods" ]; then
                      break;
                    fi
                    echo "Waiting for quarkus-backend build to be ready...";
                    sleep "2";
                  done
                  oc cancel-build bc/quarkus-backend
                  oc patch bc/quarkus-backend -p '{"spec":{"resources":{"limits":{"cpu":"6", "memory":"6Gi"}}}}'
                  oc start-build quarkus-backend
                  oc expose svc/quarkus-backend
                  # labels
                  oc label dc mongo app.openshift.io/runtime=mongodb
                  oc label dc node-frontend app.openshift.io/runtime=nodejs
                  oc label dc quarkus-backend app.openshift.io/runtime=quarkus
                  # logs
                  oc logs -f bc/quarkus-backend
                  oc logs -f bc/node-frontend
                  echo node-frontend url http://$(oc get route node-frontend --template='{{ .spec.host }}')
        component: vscode-openshift
        workdir: /projects/postit-app/node-frontend/

  - name: oc - deploy app (quarkus JVM) from github
    actions:
      - type: exec
        command: |-
                  # mongodb
                  oc new-app -e MONGODB_USER=user -e MONGODB_PASSWORD=password -e MONGODB_DATABASE=sampledb -e MONGODB_ADMIN_PASSWORD=password centos/mongodb-36-centos7 --name=mongo
                  # s2i quarkus app from source
                  oc new-app java~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --name=quarkus-backend --context-dir=quarkus-backend -e uri=mongodb://mongo -e username=user -e password=password --env=JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0"
                  oc expose svc/quarkus-backend
                  # s2i node frontend from source
                  oc new-app nodejs~https://github.com/redhat-developer-demos/quarkus-reactjs-postit-app --context-dir=node-frontend --name=node-frontend -e PORT=8080 -e COMPONENT_QUARKUS_BACKEND_HOST=quarkus-backend
                  oc expose svc/node-frontend
                  # labels
                  oc label dc mongo app.openshift.io/runtime=mongodb
                  oc label dc node-frontend app.openshift.io/runtime=nodejs
                  oc label dc quarkus-backend app.openshift.io/runtime=quarkus
                  # logs
                  oc logs -f bc/quarkus-backend
                  oc logs -f bc/node-frontend
                  echo node-frontend url http://$(oc get route node-frontend --template='{{ .spec.host }}')
        component: vscode-openshift
        workdir: /projects/postit-app/node-frontend/

  - name: oc - redeploy quarkus-backend (from local sources)
    actions:
      - type: exec
        command: |-
                  oc start-build quarkus-backend --from-dir=.
                  oc logs -f bc/quarkus-backend
        component: vscode-openshift
        workdir: /projects/postit-app/


  - name: oc - redeploy node-frontend (from local sources)
    actions:
      - type: exec
        command: |-
                  oc start-build node-frontend --from-dir=.
                  oc logs -f bc/node-frontend

        component: vscode-openshift
        workdir: /projects/postit-app/



  - name: oc - scale node-frontend
    actions:
      - type: exec
        command: |-
                  echo "Scale node-frontend. Enter the number of desired replicas:";
                  read replicas;
                  oc scale dc/node-frontend --replicas=${replicas}
        component: vscode-openshift
        workdir: /projects/postit-app/

  - name: oc - scale quarkus-backend
    actions:
      - type: exec
        command: |-
                  echo "Scale quarkus-frontend. Enter the number of desired replicas:";
                  read replicas;
                  oc scale dc/quarkus-backend --replicas=${replicas}
        component: vscode-openshift
        workdir: /projects/postit-app/

  - name: oc - get node-frontend URL
    actions:
      - type: exec
        command: |-
                  echo node-frontend url http://$(oc get route node-frontend --template='{{ .spec.host }}')
        component: vscode-openshift
        workdir: /projects/postit-app/node-frontend/






  - name: oc login
    actions:
      - type: exec
        command: |-
                  rm oc; curl https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -s | tar zxv && ./oc login --server=${KUBERNETES_SERVICE_HOST}:443
        component: vscode-openshift
        workdir: /tmp

  - name: show posts
    actions:
      - workdir: /tmp
        type: exec
        command: >-
          mongo mongodb://user:password@localhost/sampledb --eval
          "printjson(db.getCollection('Posts').find().toArray())"
        component: mongo
